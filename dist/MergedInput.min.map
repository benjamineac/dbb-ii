{"version":3,"sources":["webpack://MergedInput/webpack/universalModuleDefinition","webpack://MergedInput/webpack/bootstrap","webpack://MergedInput/./main.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","m","MergedInput","Phaser","Plugins","ScenePlugin","this","gamepads","systems","input","gamepad","filter","el","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_step$value","_slicedToArray","value","index","err","return","eventEmitter","events","on","update","once","thisGamepad","refreshGamepads","setupGamepad","refreshPads","total","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","emit","gamepadButtonDown","gamepadButtonUp","keyboard","event","keyCode","Object","keys","Input","Keyboard","KeyCodes","find","key","playerIndex","getPlayerIndexFromKey","getPlayer","interaction","device","mouse","disableContextMenu","pointer","pointerMove","pointerDown","pointerUp","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","players","thisPlayer","pressed","buffer","BEARING","BEARING_DEGREES","ANGLE","direction","mapDirectionsToBearing","BEARING_LAST","DEGREES","parseFloat","mapBearingToDegrees","DEGREES_LAST","direction_secondary","checkKeyboardInput","checkGamepadInput","checkPointerInput","id","player","action","addPlayer","_typeof","Number","isInteger","push","setupControls","length","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","thisKey","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","controls","UP","DOWN","LEFT","RIGHT","TIMESTAMP","buttons","M1","M2","M3","M4","M5","position","i","last","arguments","append","includes","addKey","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_step6$value","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","thisValue","isDown","JustDown","state","JustUp","scene","sys","time","now","replace","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_step8$value","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","pad","button","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","leftStick","y","Math","abs","up","down","x","left","right","rightStick","b","threshold","distance","getBearingFromAngle","angle","angleToPointer","Angle","Between","worldX","worldY","pointerDirection","pointerAngle","leftButtonDown","rightButtonDown","middleButtonDown","backButtonDown","forwardButtonDown","moveTime","leftButtonReleased","rightButtonReleased","middleButtonReleased","backButtonReleased","forwardButtonReleased","numDirections","snap_interval","PI2","angleSnap","Snap","To","angleSnapDeg","RadToDeg","bearings","bearing","thisDirection","toUpperCase","directions","_this2","shutdown","debug","axes","a","axis","getValue","ID","Index","Buttons","Axes","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","pluginManager","_classCallCheck","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","-180","-168.75","-157.5","-146.25","-135","-123.75","-112.5","-101.25","-90","-78.75","-67.5","-56.25","-45","-33.75","-22.5","-11.25","0","11.25","22.5","33.75","45","56.25","67.5","78.75","90","101.25","112.5","123.75","135","146.25","157.5","168.75","180","c","d","name","getter","o","defineProperty","enumerable","get","r","toStringTag","t","mode","__esModule","ns","create","bind","n","object","property","prototype","hasOwnProperty","p","s","moduleId","l","modules"],"mappings":"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","file":"MergedInput.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MergedInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MergedInput\"] = factory();\n\telse\n\t\troot[\"MergedInput\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default class MergedInput extends Phaser.Plugins.ScenePlugin {\n\n\t/**\n\t * The Merged Input plugin is designed to run in the background and handle input.\n\t * Upon detecting a keypress or gamepad interaction, the plugin will update a player object and emit global events.\n\t *\n\t * @extends Phaser.Scene\n\t * @param {*} scene\n\t * @param {*} pluginManager\n\t */\n\tconstructor(scene, pluginManager) {\n\t\tsuper(scene, pluginManager);\n\t\tthis.scene = scene;\n\n\t\t// Players\n\t\tthis.players = [];\n\t\t// Gamepads\n\t\tthis.gamepads = [];\n\t\t// Keys object to store Phaser key objects. We'll check these during update\n\t\tthis.keys = {};\n\n\t\tthis.bearings = {\n\t\t\t'-180': 'W',\n\t\t\t'-168.75': 'WBN',\n\t\t\t'-157.5': 'WNW',\n\t\t\t'-146.25': 'NWBW',\n\t\t\t'-135': 'NW',\n\t\t\t'-123.75': 'NWBN',\n\t\t\t'-112.5': 'NNW',\n\t\t\t'-101.25': 'NBW',\n\t\t\t'-90': 'N',\n\t\t\t'-78.75': 'NBE',\n\t\t\t'-67.5': 'NNE',\n\t\t\t'-56.25': 'NEBN',\n\t\t\t'-45': 'NE',\n\t\t\t'-33.75': 'NEBE',\n\t\t\t'-22.5': 'EBE',\n\t\t\t'-11.25': 'EBN',\n\t\t\t'0': 'E',\n\t\t\t'11.25': 'EBS',\n\t\t\t'22.5': 'ESE',\n\t\t\t'33.75': 'SEBE',\n\t\t\t'45': 'SE',\n\t\t\t'56.25': 'SEBS',\n\t\t\t'67.5': 'SSE',\n\t\t\t'78.75': 'SBE',\n\t\t\t'90': 'S',\n\t\t\t'101.25': 'SBW',\n\t\t\t'112.5': 'SSW',\n\t\t\t'123.75': 'SWBS',\n\t\t\t'135': 'SW',\n\t\t\t'146.25': 'SWBW',\n\t\t\t'157.5': 'WSW',\n\t\t\t'168.75': 'WBS',\n\t\t\t'180': 'W'\n\t\t};\n\t}\n\n\trefreshGamepads() {\n\t\t// Sometimes, gamepads are undefined. For some reason.\n\t\tthis.gamepads = this.systems.input.gamepad.gamepads.filter(function (el) {\n\t\t\treturn el != null;\n\t\t});\n\n\t\tfor (const [index, thisGamepad] of this.gamepads.entries()) {\n\t\t\tthisGamepad.index = index; // Overwrite the gamepad index, in case we had undefined gamepads earlier\n\t\t}\n\t}\n\n\tboot() {\n\t\tthis.eventEmitter = this.systems.events;\n\t\tthis.eventEmitter.on('update', this.update, this);\n\n\t\t// Gamepad\n\t\tif (typeof this.systems.input.gamepad !== 'undefined') {\n\t\t\tthis.systems.input.gamepad.once('connected', function (thisGamepad) {\n\t\t\t\tthis.refreshGamepads();\n\t\t\t\tthis.setupGamepad(thisGamepad)\n\t\t\t}, this);\n\n\t\t\t// Check to see if the gamepad has already been setup by the browser\n\t\t\tthis.systems.input.gamepad.refreshPads();\n\t\t\tif (this.systems.input.gamepad.total) {\n\t\t\t\tthis.refreshGamepads();\n\t\t\t\tfor (const thisGamepad of this.gamepads) {\n\t\t\t\t\tthis.systems.input.gamepad.emit('connected', thisGamepad);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.systems.input.gamepad.on('down', this.gamepadButtonDown, this);\n\t\t\tthis.systems.input.gamepad.on('up', this.gamepadButtonUp, this);\n\t\t}\n\n\t\t// Keyboard\n\t\tthis.systems.input.keyboard.on('keydown', function (event) {\n\t\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\n\t\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\n\t\t\tif (playerIndex > -1) {\n\t\t\t\tthis.getPlayer(playerIndex).interaction.device = 'keyboard';\n\t\t\t}\n\t\t}, this);\n\t\tthis.systems.input.keyboard.on('keyup', function () {\n\t\t\tlet keyCode = Object.keys(Phaser.Input.Keyboard.KeyCodes).find(key => Phaser.Input.Keyboard.KeyCodes[key] === event.keyCode);\n\t\t\tlet playerIndex = this.getPlayerIndexFromKey(keyCode);\n\t\t\tif (playerIndex > -1) {\n\t\t\t\tthis.getPlayer(playerIndex).interaction.device = 'keyboard';\n\t\t\t}\n\t\t}, this);\n\n\n\t\t// Pointer\n\t\tthis.systems.input.mouse.disableContextMenu();\n\n\t\tthis.systems.input.on('pointermove', function (pointer) {\n\t\t\tthis.pointerMove(pointer);\n\t\t}, this);\n\n\t\tthis.systems.input.on('pointerdown', function (pointer) {\n\t\t\tthis.pointerDown(pointer);\n\t\t}, this);\n\n\t\tthis.systems.input.on('pointerup', function (pointer) {\n\t\t\tthis.pointerUp(pointer);\n\t\t}, this);\n\t}\n\n\tupdate() {\n\t\t// Loop through players and manage buffered input\n\t\tfor (let thisPlayer of this.players) {\n\t\t\tif (thisPlayer.interaction.pressed != '') {\n\t\t\t\tthisPlayer.interaction.buffer = '';\n\t\t\t}\n\t\t\tif (thisPlayer.interaction.buffer == '') {\n\t\t\t\tthisPlayer.interaction.pressed = '';\n\t\t\t}\n\n\t\t\t// If the pointer hasn't moved, and the scene has changed, this can end up as undefined\n\t\t\tthisPlayer.pointer.BEARING = typeof thisPlayer.pointer.BEARING != 'undefined' ? thisPlayer.pointer.BEARING : '';\n\t\t\tthisPlayer.pointer.BEARING_DEGREES = typeof thisPlayer.pointer.BEARING_DEGREES != 'undefined' ? thisPlayer.pointer.BEARING_DEGREES : 0;\n\t\t\tthisPlayer.pointer.ANGLE = typeof thisPlayer.pointer.ANGLE != 'undefined' ? thisPlayer.pointer.ANGLE : '';\n\n\n\t\t\tthisPlayer.direction.BEARING = this.mapDirectionsToBearing(thisPlayer.direction);\n\t\t\tthisPlayer.direction.BEARING_LAST = thisPlayer.direction.BEARING != '' ? thisPlayer.direction.BEARING : thisPlayer.direction.BEARING_LAST;\n\t\t\tthisPlayer.direction.DEGREES = thisPlayer.direction.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING)) : 0;\n\t\t\tthisPlayer.direction.DEGREES_LAST = thisPlayer.direction.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction.BEARING_LAST)) : 0;\n\t\t\tthisPlayer.direction_secondary.BEARING = this.mapDirectionsToBearing(thisPlayer.direction_secondary);\n\t\t\tthisPlayer.direction_secondary.BEARING_LAST = thisPlayer.direction_secondary.BEARING != '' ? thisPlayer.direction_secondary.BEARING : thisPlayer.direction_secondary.BEARING_LAST;\n\t\t\tthisPlayer.direction_secondary.DEGREES = thisPlayer.direction_secondary.BEARING != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING)) : 0;\n\t\t\tthisPlayer.direction_secondary.DEGREES_LAST = thisPlayer.direction_secondary.BEARING_LAST != '' ? parseFloat(this.mapBearingToDegrees(thisPlayer.direction_secondary.BEARING_LAST)) : 0;\n\t\t}\n\n\t\tthis.checkKeyboardInput();\n\t\tthis.checkGamepadInput();\n\t\tthis.checkPointerInput();\n\t}\n\n\t/**\n\t * Set up the gamepad and associate with a player object\n\t */\n\tsetupGamepad(thisGamepad) {\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', id: thisGamepad.id, player: thisGamepad.index, action: 'Connected' });\n\n\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\n\t\t\tthis.addPlayer();\n\t\t}\n\t\tthis.players[thisGamepad.index].gamepad = thisGamepad;\n\t}\n\n\t/**\n\t * Add a new player object to the players array\n\t * @param {number} index Player index - if a player object at this index already exists, it will be returned instead of creating a new player object\n\t */\n\taddPlayer(index) {\n\t\tif (typeof Number.isInteger(index) && typeof this.players[index] !== 'undefined') {\n\t\t\treturn this.players[index];\n\t\t}\n\t\telse {\n\t\t\tthis.players.push(this.setupControls());\n\t\t\tthis.players[this.players.length - 1].index = this.players.length - 1;\n\t\t\treturn this.players[this.players.length - 1];\n\t\t}\n\t}\n\n\t/**\n\t * Get player object\n\t * @param {number} index Player index\n\t */\n\tgetPlayer(index) {\n\t\treturn typeof this.players[index] !== 'undefined' ? this.players[index] : ''\n\t}\n\n\tgetPlayerIndexFromKey(key) {\n\t\tfor (let thisPlayer of this.players) {\n\t\t\t// Loop through all the keys assigned to this player\n\t\t\tfor (var thisKey in thisPlayer.keys) {\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\n\t\t\t\t\tif (thisValue == key) {\n\t\t\t\t\t\treturn thisPlayer.index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Returns a struct to hold input control information\n\t * Set up a struct for each player in the game\n\t * Direction and Buttons contain the input from the devices\n\t * The keys struct contains arrays of keyboard characters that will trigger the action\n\t */\n\tsetupControls() {\n\t\tlet controls = {\n\t\t\t'direction': {\n\t\t\t\t'UP': 0,\n\t\t\t\t'DOWN': 0,\n\t\t\t\t'LEFT': 0,\n\t\t\t\t'RIGHT': 0,\n\t\t\t\t'BEARING': '',\n\t\t\t\t'BEARING_LAST': '',\n\t\t\t\t'DEGREES': 0,\n\t\t\t\t'DEGREES_LAST': 0,\n\t\t\t\t'TIMESTAMP': 0\n\t\t\t},\n\t\t\t'direction_secondary': {\n\t\t\t\t'UP': 0,\n\t\t\t\t'DOWN': 0,\n\t\t\t\t'LEFT': 0,\n\t\t\t\t'RIGHT': 0,\n\t\t\t\t'BEARING': '',\n\t\t\t\t'DEGREES': 0,\n\t\t\t\t'BEARING_LAST': '',\n\t\t\t\t'DEGREES_LAST': 0,\n\t\t\t\t'TIMESTAMP': 0\n\t\t\t},\n\t\t\t'buttons': {},\n\t\t\t'pointer': {\n\t\t\t\t'M1': 0,\n\t\t\t\t'M2': 0,\n\t\t\t\t'M3': 0,\n\t\t\t\t'M4': 0,\n\t\t\t\t'M5': 0,\n\t\t\t\t'BEARING': '',\n\t\t\t\t'BEARING_DEGREES': 0,\n\t\t\t\t'ANGLE': 0,\n\t\t\t\t'TIMESTAMP': 0\n\t\t\t},\n\t\t\t'position': {},\n\t\t\t'interaction': {},\n\t\t\t'gamepad': {},\n\t\t\t'keys': {\n\t\t\t\t'UP': [],\n\t\t\t\t'DOWN': [],\n\t\t\t\t'LEFT': [],\n\t\t\t\t'RIGHT': [],\n\t\t\t}\n\t\t}\n\t\tfor (let i = 1; i <= 16; i++) {\n\t\t\tcontrols.buttons['B' + i] = 0;\n\t\t\tcontrols.keys['B' + i] = [];\n\t\t}\n\n\t\tcontrols.interaction.buffer = '';\n\t\tcontrols.interaction.pressed = '';\n\t\tcontrols.interaction.last = '';\n\t\tcontrols.interaction.device = '';\n\n\t\treturn controls;\n\t}\n\n\t// Keyboard functions\n\n\t/**\n\t * Define a key for a player/action combination\n\t * @param {number} player The player on which we're defining a key\n\t * @param {string} action The action to define\n\t * @param {string} value The key to use\n\t * @param {boolean} append When true, this key definition will be appended to the existing key(s) for this action\n\t */\n\tdefineKey(player = 0, action, value, append = false) {\n\t\t// Set up a new player if none defined\n\t\tif (typeof this.players[player] === 'undefined') {\n\t\t\tthis.addPlayer();\n\t\t}\n\n\t\tif (['UP', 'DOWN', 'LEFT', 'RIGHT', 'ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT', 'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'B12', 'B13', 'B14', 'B15', 'B16'].includes(action)) {\n\t\t\tif (append && (typeof this.players[player].keys[action] !== 'undefined')) {\n\t\t\t\tthis.players[player].keys[action].push([value]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.players[player].keys[action] = [];\n\t\t\t\tthis.players[player].keys[action].push([value]);\n\t\t\t}\n\n\t\t\tthis.keys[[value]] = this.systems.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes[value]);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate through players and check for interaction with defined keys\n\t */\n\tcheckKeyboardInput() {\n\t\t// Loop through players and check for keypresses - use of 'entries()' gives us an index to use for the player\n\t\tfor (let [playerIndex, thisPlayer] of this.players.entries()) {\n\t\t\t// Loop through all the keys assigned to this player\n\t\t\tfor (var thisKey in thisPlayer.keys) {\n\t\t\t\tlet action = 0;\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) {\n\t\t\t\t\t// Check if the key is down\n\t\t\t\t\taction = (this.keys[thisValue].isDown) ? 1 : action;\n\n\t\t\t\t\t// Emit events based on the key down and up values\n\t\t\t\t\tif (Phaser.Input.Keyboard.JustDown(this.keys[thisValue])) {\n\t\t\t\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: thisKey, state: 'DOWN' });\n\t\t\t\t\t\t// Update the last button state\n\t\t\t\t\t\tthisPlayer.interaction.pressed = thisKey;\n\t\t\t\t\t\tthisPlayer.interaction.buffer = thisKey;\n\t\t\t\t\t\tthisPlayer.interaction.last = thisKey;\n\n\t\t\t\t\t}\n\t\t\t\t\tif (Phaser.Input.Keyboard.JustUp(this.keys[thisValue])) {\n\t\t\t\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'keyboard', value: 1, player: playerIndex, action: thisKey, state: 'UP' });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set the action in the player object\n\t\t\t\tif (['UP', 'DOWN', 'LEFT', 'RIGHT'].includes(thisKey)) {\n\t\t\t\t\tthisPlayer.direction[thisKey] = action;\n\t\t\t\t\tthisPlayer.direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\t}\n\t\t\t\telse if (['ALT_UP', 'ALT_DOWN', 'ALT_LEFT', 'ALT_RIGHT'].includes(thisKey)) {\n\t\t\t\t\tthisPlayer.direction_secondary[thisKey.replace('ALT_', '')] = action;\n\t\t\t\t\tif (action == 1) {\n\t\t\t\t\t\tthisPlayer.direction_secondary.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthisPlayer.buttons[thisKey] = action;\n\t\t\t\t\tif (action == 1) {\n\t\t\t\t\t\tthisPlayer.buttons.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set the latest interaction flag\n\t\t\t\tif (action == 1) {\n\t\t\t\t\tthisPlayer.interaction.device = 'keyboard';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Iterate through players and check for interaction with defined pointer buttons\n\t */\n\tcheckPointerInput() {\n\t\t// Loop through players and check for button presses - use of 'entries()' gives us an index to use for the player\n\t\tfor (let [playerIndex, thisPlayer] of this.players.entries()) {\n\t\t\t// Loop through all the keys assigned to this player\n\t\t\tfor (var thisKey in thisPlayer.keys) {\n\t\t\t\tfor (var thisValue of thisPlayer.keys[thisKey]) { // Each definition for this key action\n\t\t\t\t\tif (['M1', 'M2', 'M3', 'M4', 'M5'].includes(thisValue[0])) {\n\t\t\t\t\t\t// Check to see if button is pressed (stored in P1, can't have two mice...)\n\t\t\t\t\t\tif (this.players[0].pointer[thisValue] == 1) {\n\t\t\t\t\t\t\tthisPlayer.buttons[thisKey] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// Gamepad functions\n\n\t/**\n\t * When a gamepad button is pressed down, this function will emit a mergedInput event in the global registry.\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\n\t * @param {number} index Button index\n\t * @param {number} value Button value\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\n\t */\n\tgamepadButtonDown(pad, button, value) {\n\t\tthis.players[pad.index].interaction.device = 'gamepad';\n\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'DOWN' });\n\n\t\t// DPad mapping\n\t\tif (button.index === 12) {\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'UP', state: 'DOWN' });\n\t\t}\n\t\tif (button.index === 13) {\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'DOWN', state: 'DOWN' });\n\t\t}\n\t\tif (button.index === 14) {\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'LEFT', state: 'DOWN' });\n\t\t}\n\t\tif (button.index === 15) {\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'RIGHT', state: 'DOWN' });\n\t\t}\n\n\t\t// Last button pressed\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\n\t\t\t// Update the last button state\n\t\t\tthis.players[pad.index].interaction.pressed = 'B' + button.index;\n\t\t\tthis.players[pad.index].interaction.last = 'B' + button.index;\n\t\t\tthis.players[pad.index].interaction.buffer = 'B' + button.index;\n\t\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\n\t\t}\n\t\telse {\n\t\t\tthis.players[pad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t}\n\t}\n\n\t/**\n\t * When a gamepad button is released, this function will emit a mergedInput event in the global registry.\n\t * The event contains a reference to the player assigned to the gamepad, and passes a mapped action and value\n\t * @param {number} index Button index\n\t * @param {number} value Button value\n\t * @param {Phaser.Input.Gamepad.Button} button Phaser Button object\n\t */\n\tgamepadButtonUp(pad, button, value) {\n\t\tthis.players[pad.index].interaction.device = 'gamepad';\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: value, player: pad.index, action: 'B' + button.index, state: 'UP' });\n\t\t// DPad mapping\n\t\tif (button.index === 12) {\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'UP', state: 'UP' });\n\t\t}\n\t\tif (button.index === 13) {\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'DOWN', state: 'UP' });\n\t\t}\n\t\tif (button.index === 14) {\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'LEFT', state: 'UP' });\n\t\t}\n\t\tif (button.index === 15) {\n\t\t\tthis.eventEmitter.emit('mergedInput', { device: 'gamepad', value: 1, player: pad.index, action: 'RIGHT', state: 'UP' });\n\t\t}\n\n\t\tif (![12, 13, 14, 15].includes(button.index)) {\n\t\t\t// Update the last button state\n\t\t\tthis.players[pad.index].buttons.TIMESTAMP = this.scene.sys.time.now;\n\t\t}\n\t\telse {\n\t\t\tthis.players[pad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t}\n\t}\n\n\t/**\n\t * Iterate through gamepads and handle interactions\n\t */\n\tcheckGamepadInput() {\n\t\t// Check for gamepad input\n\t\tfor (var thisGamepad of this.gamepads) {\n\n\t\t\t// Set up a player if we don't have one, presumably due to race conditions in detecting gamepads\n\t\t\tif (typeof this.players[thisGamepad.index] === 'undefined') {\n\t\t\t\tthis.addPlayer();\n\t\t\t}\n\n\t\t\t// Directions\n\t\t\tif (thisGamepad.leftStick.y < -0.5) {\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = Math.abs(thisGamepad.leftStick.y)\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t}\n\t\t\telse if (thisGamepad.leftStick.y > 0.5) {\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.leftStick.y\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t}\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\n\t\t\t\t// DPad\n\t\t\t\tthis.players[thisGamepad.index].direction.UP = thisGamepad.up ? 1 : 0;\n\t\t\t\tthis.players[thisGamepad.index].direction.DOWN = thisGamepad.down ? 1 : 0;\n\t\t\t}\n\n\t\t\tif (thisGamepad.leftStick.x < -0.5) {\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = Math.abs(thisGamepad.leftStick.x)\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t}\n\t\t\telse if (thisGamepad.leftStick.x > 0.5) {\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.leftStick.x\n\t\t\t\tthis.players[thisGamepad.index].direction.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t}\n\t\t\telse if (this.players[thisGamepad.index].interaction.device === 'gamepad') {\n\t\t\t\t// DPad\n\t\t\t\tthis.players[thisGamepad.index].direction.LEFT = thisGamepad.left ? 1 : 0;\n\t\t\t\tthis.players[thisGamepad.index].direction.RIGHT = thisGamepad.right ? 1 : 0;\n\t\t\t}\n\n\t\t\t// Secondary\n\t\t\tif (thisGamepad.rightStick.y < -0.5) {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = Math.abs(thisGamepad.rightStick.y)\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t}\n\t\t\telse if (thisGamepad.rightStick.y > 0.5) {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = thisGamepad.rightStick.y\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.UP = 0;\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.DOWN = 0;\n\t\t\t}\n\n\t\t\tif (thisGamepad.rightStick.x < -0.5) {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = Math.abs(thisGamepad.rightStick.x)\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t}\n\t\t\telse if (thisGamepad.rightStick.x > 0.5) {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = thisGamepad.rightStick.x\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.LEFT = 0;\n\t\t\t\tthis.players[thisGamepad.index].direction_secondary.RIGHT = 0;\n\t\t\t}\n\n\t\t\tif (this.players[thisGamepad.index].interaction.device === 'gamepad') {\n\t\t\t\t// Buttons\n\n\t\t\t\tfor (var b = 0; b < thisGamepad.buttons.length; b++) {\n\t\t\t\t\tlet button = thisGamepad.buttons[b];\n\t\t\t\t\tthis.players[thisGamepad.index].buttons['B' + b] = button.value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Function to run on pointer move.\n\t * @param {*} pointer - The pointer object\n\t */\n\tpointerMove(pointer, threshold) {\n\t\tvar threshold = threshold || 0;\n\t\tif (pointer.distance > threshold) {\n\t\t\tlet pointerDirection = this.getBearingFromAngle(pointer.angle, 8);\n\t\t\t// this.players[0].direction_secondary = this.mapBearingToDirections(pointerDirection);\n\n\t\t\t// If we've been given a player position, return bearings and angles\n\t\t\tif (typeof this.players[0] !== 'undefined' && this.players[0].position.x !== 'undefined') {\n\t\t\t\tlet position = this.players[0].position;\n\t\t\t\tlet angleToPointer = Phaser.Math.Angle.Between(position.x, position.y, pointer.worldX, pointer.worldY);\n\t\t\t\tlet pointerDirection = this.getBearingFromAngle(angleToPointer, 8);\n\t\t\t\tlet pointerAngle = Number(this.mapBearingToDegrees(pointerDirection));\n\n\t\t\t\tthis.players[0].pointer.BEARING = pointerDirection;\n\t\t\t\tthis.players[0].pointer.ANGLE = angleToPointer;\n\t\t\t\tthis.players[0].pointer.BEARING_DEGREES = pointerAngle;\n\t\t\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Function to run on pointer down. Indicates that Mx has been pressed, which should be listened to by the player object\n\t * @param {*} pointer - The pointer object\n\t */\n\tpointerDown(pointer) {\n\t\tlet action = '';\n\t\tthis.players[0].interaction.device = 'pointer';\n\t\tif (pointer.leftButtonDown()) {\n\t\t\taction = 'M1';\n\t\t}\n\t\tif (pointer.rightButtonDown()) {\n\t\t\taction = 'M2';\n\t\t}\n\t\tif (pointer.middleButtonDown()) {\n\t\t\taction = 'M3';\n\t\t}\n\t\tif (pointer.backButtonDown()) {\n\t\t\taction = 'M4';\n\t\t}\n\t\tif (pointer.forwardButtonDown()) {\n\t\t\taction = 'M5';\n\t\t}\n\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'DOWN' });\n\n\t\tthis.players[0].pointer[action] = 1;\n\n\t\t// Update the last button state\n\t\tthis.players[0].interaction.pressed = action;\n\t\tthis.players[0].interaction.last = action;\n\t\tthis.players[0].interaction.buffer = action;\n\t\tthis.players[0].pointer.TIMESTAMP = pointer.moveTime;\n\t}\n\n\n\t/**\n\t * Function to run on pointer up. Indicates that Mx has been released, which should be listened to by the player object\n\t * @param {*} pointer - The pointer object\n\t */\n\tpointerUp(pointer) {\n\t\tlet action = '';\n\t\tif (pointer.leftButtonReleased()) {\n\t\t\taction = 'M1';\n\t\t}\n\t\tif (pointer.rightButtonReleased()) {\n\t\t\taction = 'M2';\n\t\t}\n\t\tif (pointer.middleButtonReleased()) {\n\t\t\taction = 'M3';\n\t\t}\n\t\tif (pointer.backButtonReleased()) {\n\t\t\taction = 'M4';\n\t\t}\n\t\tif (pointer.forwardButtonReleased()) {\n\t\t\taction = 'M5';\n\t\t}\n\n\t\tthis.eventEmitter.emit('mergedInput', { device: 'pointer', value: 1, player: 0, action: action, state: 'UP' });\n\n\t\tthis.players[0].pointer[action] = 0;\n\t\tthis.players[0].pointer.TIMESTAMP = this.scene.sys.time.now;\n\t}\n\n\n\t/**\n\t * Get the bearing from a given angle\n\t * @param {float} angle - Angle to use\n\t * @param {number} numDirections - Number of possible directions (e.g. 4 for N/S/E/W)\n\t */\n\tgetBearingFromAngle(angle, numDirections, threshold) {\n\t\tvar numDirections = numDirections || 8;\n\n\t\tvar snap_interval = Phaser.Math.PI2 / numDirections;\n\n\t\tvar angleSnap = Phaser.Math.Snap.To(angle, snap_interval);\n\t\tvar angleSnapDeg = Phaser.Math.RadToDeg(angleSnap);\n\t\tvar angleSnapDir = this.bearings[angleSnapDeg];\n\n\t\treturn angleSnapDir;\n\t}\n\n\n\t/**\n\t * Given a bearing, return a direction object containing boolean flags for the four directions\n\t * @param {*} bearing\n\t */\n\tmapBearingToDirections(bearing) {\n\t\tlet thisDirection = {\n\t\t\t'UP': 0,\n\t\t\t'DOWN': 0,\n\t\t\t'LEFT': 0,\n\t\t\t'RIGHT': 0,\n\t\t\t'BEARING': bearing.toUpperCase()\n\t\t}\n\n\t\tif (bearing.toUpperCase().includes('W')) {\n\t\t\tthisDirection.LEFT = 1;\n\t\t}\n\t\tif (bearing.toUpperCase().includes('E')) {\n\t\t\tthisDirection.RIGHT = 1;\n\t\t}\n\t\tif (bearing.toUpperCase().includes('S')) {\n\t\t\tthisDirection.DOWN = 1;\n\t\t}\n\t\tif (bearing.toUpperCase().includes('N')) {\n\t\t\tthisDirection.UP = 1;\n\t\t}\n\n\t\treturn thisDirection;\n\t}\n\n\n\t/**\n\t * Given a directions object, return the applicable bearing (8 way only)\n\t * @param {*} directions\n\t */\n\tmapDirectionsToBearing(directions, threshold) {\n\t\tvar threshold = threshold || -.5\n\t\tif (directions.UP && !(directions.LEFT || directions.RIGHT)) {\n\t\t\treturn 'N';\n\t\t}\n\t\tif (directions.RIGHT && directions.UP) {\n\t\t\treturn 'NE';\n\t\t}\n\t\tif (directions.RIGHT && !(directions.UP || directions.DOWN)) {\n\t\t\treturn 'E';\n\t\t}\n\t\tif (directions.RIGHT && directions.DOWN) {\n\t\t\treturn 'SE';\n\t\t}\n\t\tif (directions.DOWN && !(directions.LEFT || directions.RIGHT)) {\n\t\t\treturn 'S';\n\t\t}\n\t\tif (directions.LEFT && directions.DOWN) {\n\t\t\treturn 'SW';\n\t\t}\n\t\tif (directions.LEFT && !(directions.UP || directions.DOWN)) {\n\t\t\treturn 'W';\n\t\t}\n\t\tif (directions.LEFT && directions.UP) {\n\t\t\treturn 'NW';\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Given a bearing, return the snapped angle in degrees\n\t * @param {*} bearing\n\t */\n\tmapBearingToDegrees(bearing) {\n\t\tif (bearing != '') {\n\t\t\treturn Object.keys(this.bearings).find(key => this.bearings[key] === bearing);\n\t\t}\n\t\telse {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\n\tdestroy() {\n\t\tthis.shutdown();\n\t\tthis.scene = undefined;\n\t}\n\n\t/**\n\t * Return debug object\n\t */\n\tdebug() {\n\t\t// Debug variables\n\t\tvar debug = {\n\t\t\t'input': {}\n\t\t};\n\t\tdebug.input.gamepads = [];\n\t\tfor (var i = 0; i < this.gamepads.length; i++) {\n\t\t\tlet pad = this.gamepads[i];\n\t\t\tlet buttons = {};\n\t\t\tlet axes = {};\n\n\t\t\tfor (var b = 0; b < pad.buttons.length; b++) {\n\t\t\t\tlet button = pad.buttons[b];\n\t\t\t\tbuttons['B' + button.index] = button.value;\n\t\t\t}\n\n\t\t\tfor (var a = 0; a < pad.axes.length; a++) {\n\t\t\t\tlet axis = pad.axes[a];\n\t\t\t\taxes['A' + axis.index] = axis.getValue();\n\t\t\t}\n\n\t\t\tdebug.input.gamepads.push({\n\t\t\t\t'ID': pad.id,\n\t\t\t\t'Index': pad.index,\n\t\t\t\t'Buttons': buttons,\n\t\t\t\t'Axes': axes\n\t\t\t});\n\t\t}\n\n\t\tdebug.players = [];\n\t\tfor (let thisPlayer of this.players) {\n\t\t\tdebug.players.push({\n\t\t\t\t'interaction': thisPlayer.interaction,\n\t\t\t\t'device': thisPlayer.device,\n\t\t\t\t'buttons': thisPlayer.buttons,\n\t\t\t\t'pointer': thisPlayer.pointer,\n\t\t\t\t'direction': thisPlayer.direction,\n\t\t\t\t'direction_secondary': thisPlayer.direction_secondary,\n\t\t\t\t'keys': thisPlayer.keys\n\t\t\t})\n\t\t}\n\n\t\treturn debug;\n\t}\n}\n"],"sourceRoot":""}